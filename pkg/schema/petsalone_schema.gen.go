// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// Pet defines model for Pet.
type Pet struct {
	MissingSince time.Time `json:"missingSince"`
	Name         string    `json:"name"`
	PetType      string    `json:"petType"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody Pet

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /api/pets)
	GetAllPets(c *gin.Context)
	// Creates a new missing pet
	// (POST /api/pets)
	AddPet(c *gin.Context)
	// Returns a specific pet type
	// (GET /api/pets/{type})
	FindPetByType(c *gin.Context, pType string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetAllPets operation middleware
func (siw *ServerInterfaceWrapper) GetAllPets(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAllPets(c)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddPet(c)
}

// FindPetByType operation middleware
func (siw *ServerInterfaceWrapper) FindPetByType(c *gin.Context) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameter("simple", false, "type", c.Param("type"), &pType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter type: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FindPetByType(c, pType)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/pets", wrapper.GetAllPets)

	router.POST(options.BaseURL+"/api/pets", wrapper.AddPet)

	router.GET(options.BaseURL+"/api/pets/:type", wrapper.FindPetByType)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVTW/bSAz9KwPuHrWWN7kEOtUp2iI3o+0t9YGRaHsMzUeHdFrB0H8vZkayozhp0I9D",
	"TpJHJN8j3xv6ALUz3lmywlAdgOstGUyv70JwIb744DwF0ZSOa9dQfDbEddBetLNQ5WCVvhWwdsGgQAXa",
	"yuUFFCCdp/yTNhSgL8AQM26eLTR+PqayBG030PcFBPq614EaqG5hABzDV30BS5Jz0kYza7v5pG2dMI8M",
	"GxT6T7R5AqoAiyZFn33wJJ/T2eEFfqnCKb6YElkdMd3djmqBPuZru3Z50FawTs2QQd1GFNzt0M52nZOt",
	"5vs3m3g+q52BkewQonJI5Dod72J5w2odJ5yJKE/CsXctbUxfkvCidTZyvafAOev/2Xw2j8WcJ4teQwWX",
	"6agAj7JNIy7R6zJVqw6wySJMsT+S7INV2LYTdNWQoG75i4UEEDDG3zRQwQeSRdsuM8VA7J3lLOjFfD7O",
	"iGzCQu9bXafccscRcHRzfNNCJiX+G2gNFfxTnnxfDqYvo3X6oyYYAnZZkmkfsQFPokZCecpr3LfyS5x+",
	"RiVfvifA95a+e6qFGkVDTAG8NwZDd5wxq4EjJ7c6fkKNt4FQiBUqS98eCnKmwqJpluk4OptYrl3T/bVG",
	"08zP21ySKHEKmyY+ZEuKOxYy8PB+SdhT/4fG+A1ur1X75xWNccf7WR6iwfsXrinnu3mHTI1yNhle8g6b",
	"uuO9ttEe192w4TwGNCQUGKrbx7VjBeXWg810mibK9rS+BoipxsWDwT3et6tXtBhe/VJQ7KnWa12f5EzV",
	"mML9KNg+xH+arYivyrJ1NbZbx1Jdza/mJfSr/kcAAAD//7aQAYoyCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

